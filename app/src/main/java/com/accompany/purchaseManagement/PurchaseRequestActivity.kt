package com.accompany.purchaseManagement

import android.app.Activity
import android.content.Intent
import android.net.Uri
import android.os.Bundle
import android.provider.MediaStore
import android.view.View
import android.widget.*
import androidx.appcompat.app.AlertDialog
import androidx.appcompat.app.AppCompatActivity
import androidx.core.content.FileProvider
import androidx.lifecycle.lifecycleScope
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.RecyclerView
import androidx.viewpager2.widget.ViewPager2
import com.google.android.material.tabs.TabLayout
import com.google.android.material.tabs.TabLayoutMediator
import com.google.firebase.firestore.FirebaseFirestore
import com.google.firebase.storage.FirebaseStorage
import kotlinx.coroutines.launch
import kotlinx.coroutines.tasks.await
import java.io.File
import java.text.SimpleDateFormat
import java.util.*
import com.accompany.purchaseManagement.UserInfo

class PurchaseRequestActivityV2 : AppCompatActivity() {

    companion object {
        private const val REQUEST_IMAGE_CAPTURE = 1
        private const val REQUEST_IMAGE_PICK = 2
    }

    // ViewPager Í¥ÄÎ†®
    private lateinit var viewPager: ViewPager2
    private lateinit var tabLayout: TabLayout
    private lateinit var btnPrevious: Button
    private lateinit var btnNext: Button
    private lateinit var progressBar: ProgressBar

    // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥
    private lateinit var googleAuthHelper: GoogleAuthHelper
    private var currentUser: UserInfo? = null

    // ÏûÖÎ†• Îç∞Ïù¥ÌÑ∞
    private var equipmentName = ""
    private var quantity = "1"
    private var location = ""
    private var purpose = ""
    private var note = ""
    var photoUris = mutableListOf<Uri>()

    // Firebase
    private val db = FirebaseFirestore.getInstance()
    private val storage = FirebaseStorage.getInstance()
    private lateinit var dbHelper: PurchaseRequestDbHelper
    private lateinit var fcmHelper: FcmNotificationHelper
    private lateinit var emailHelper: EmailHelper

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_purchase_request_v2)

        supportActionBar?.title = "Íµ¨Îß§Ïã†Ï≤≠"

        // Ï¥àÍ∏∞Ìôî
        googleAuthHelper = GoogleAuthHelper(this)
        currentUser = googleAuthHelper.getCurrentUser()
        dbHelper = PurchaseRequestDbHelper(this)
        fcmHelper = FcmNotificationHelper(this)
        emailHelper = EmailHelper(this)

        initViews()
        setupViewPager()
    }

    private fun initViews() {
        viewPager = findViewById(R.id.viewPager)
        tabLayout = findViewById(R.id.tabLayout)
        btnPrevious = findViewById(R.id.btnPrevious)
        btnNext = findViewById(R.id.btnNext)
        progressBar = findViewById(R.id.progressBar)

        btnPrevious.setOnClickListener {
            if (viewPager.currentItem > 0) {
                viewPager.currentItem = viewPager.currentItem - 1
            }
        }

        btnNext.setOnClickListener {
            if (validateCurrentPage()) {
                if (viewPager.currentItem < 5) { // Ï¥ù 6ÌéòÏù¥ÏßÄ
                    viewPager.currentItem = viewPager.currentItem + 1
                } else {
                    submitPurchaseRequest()
                }
            }
        }
    }

    private fun setupViewPager() {
        val adapter = PurchaseRequestPagerAdapter(this)
        viewPager.adapter = adapter

        // ÌÉ≠ ÏÑ§Ï†ï
        TabLayoutMediator(tabLayout, viewPager) { tab, position ->
            tab.text = when (position) {
                0 -> "Ïû•ÎπÑÎ™Ö"
                1 -> "ÏàòÎüâ"
                2 -> "Ïû•ÏÜå"
                3 -> "Ïö©ÎèÑ"
                4 -> "Í∏∞ÌÉÄ"
                5 -> "ÏÇ¨ÏßÑ"
                else -> ""
            }
        }.attach()

        // ÌéòÏù¥ÏßÄ Î≥ÄÍ≤Ω Î¶¨Ïä§ÎÑà
        viewPager.registerOnPageChangeCallback(object : ViewPager2.OnPageChangeCallback() {
            override fun onPageSelected(position: Int) {
                updateButtons(position)
            }
        })
    }

    private fun updateButtons(position: Int) {
        // Ïù¥Ï†Ñ Î≤ÑÌäº
        btnPrevious.visibility = if (position > 0) View.VISIBLE else View.INVISIBLE

        // Îã§Ïùå Î≤ÑÌäº ÌÖçÏä§Ìä∏
        btnNext.text = when (position) {
            5 -> "Ï†úÏ∂ú"
            2, 4, 5 -> "Îã§Ïùå (ÏÑ†ÌÉùÏÇ¨Ìï≠)"
            else -> "Îã§Ïùå"
        }
    }

    private fun validateCurrentPage(): Boolean {
        return when (viewPager.currentItem) {
            0 -> { // Ïû•ÎπÑÎ™Ö
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? EquipmentNameFragment
                equipmentName = fragment?.getEquipmentName() ?: ""
                if (equipmentName.isEmpty()) {
                    Toast.makeText(this, "Ïû•ÎπÑÎ™ÖÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                    false
                } else true
            }
            1 -> { // ÏàòÎüâ
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? QuantityFragment
                quantity = fragment?.getQuantity() ?: "1"
                if (quantity.isEmpty() || quantity.toIntOrNull() == null || quantity.toInt() <= 0) {
                    Toast.makeText(this, "Ïò¨Î∞îÎ•∏ ÏàòÎüâÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                    false
                } else true
            }
            2 -> { // Ïû•ÏÜå (ÏÑ†ÌÉù)
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? LocationFragment
                location = fragment?.getLocation() ?: ""
                true
            }
            3 -> { // Ïö©ÎèÑ
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? PurposeFragment
                purpose = fragment?.getPurpose() ?: ""
                if (purpose.isEmpty()) {
                    Toast.makeText(this, "ÏÇ¨Ïö© Ïö©ÎèÑÎ•º ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî", Toast.LENGTH_SHORT).show()
                    false
                } else true
            }
            4 -> { // Í∏∞ÌÉÄÏÇ¨Ìï≠ (ÏÑ†ÌÉù)
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? NoteFragment
                note = fragment?.getNote() ?: ""
                true
            }
            5 -> { // ÏÇ¨ÏßÑ (ÏÑ†ÌÉù)
                val fragment = supportFragmentManager.findFragmentByTag("f${viewPager.currentItem}")
                        as? PhotoFragment
                photoUris.clear()
                photoUris.addAll(fragment?.getPhotoUris() ?: emptyList())
                true
            }
            else -> true
        }
    }

    private fun submitPurchaseRequest() {
        // ÏÇ¨Ïö©Ïûê Ï†ïÎ≥¥ ÌôïÏù∏
        if (currentUser == null) {
            Toast.makeText(this, "Î°úÍ∑∏Ïù∏ Ï†ïÎ≥¥Î•º ÌôïÏù∏Ìï† Ïàò ÏóÜÏäµÎãàÎã§", Toast.LENGTH_SHORT).show()
            return
        }

        // ÏµúÏ¢Ö ÌôïÏù∏ Îã§Ïù¥ÏñºÎ°úÍ∑∏
        showSubmitConfirmDialog()
    }

    private fun showSubmitConfirmDialog() {
        val message = """
            üìã Íµ¨Îß§Ïã†Ï≤≠ ÎÇ¥Ïö© ÌôïÏù∏
            
            üë§ Ïã†Ï≤≠Ïûê: ${currentUser?.name} (${currentUser?.department})
            üîß Ïû•ÎπÑÎ™Ö: $equipmentName
            üî¢ ÏàòÎüâ: $quantity
            ${if (location.isNotEmpty()) "üìç Ïû•ÏÜå: $location\n" else ""}
            üìù Ïö©ÎèÑ: $purpose
            ${if (note.isNotEmpty()) "üí¨ Í∏∞ÌÉÄ: $note\n" else ""}
            üì∏ ÏÇ¨ÏßÑ: ${photoUris.size}Ïû•
            
            ÏúÑ ÎÇ¥Ïö©ÏúºÎ°ú Íµ¨Îß§Ïã†Ï≤≠ÏùÑ Ï†úÏ∂úÌïòÏãúÍ≤†ÏäµÎãàÍπå?
        """.trimIndent()

        AlertDialog.Builder(this)
            .setTitle("Íµ¨Îß§Ïã†Ï≤≠ ÌôïÏù∏")
            .setMessage(message)
            .setPositiveButton("Ï†úÏ∂ú") { _, _ ->
                performSubmit()
            }
            .setNegativeButton("Ï∑®ÏÜå", null)
            .show()
    }

// PurchaseRequestActivityV2_Part1.ktÏóêÏÑú Ïù¥Ïñ¥ÏÑú...

    private fun performSubmit() {
        btnNext.isEnabled = false
        progressBar.visibility = View.VISIBLE

        val applicantName = currentUser?.name ?: "ÎØ∏ÏÑ§Ï†ï"
        val applicantDepartment = currentUser?.department ?: "ÎØ∏ÏÑ§Ï†ï"
        val applicantEmail = currentUser?.email ?: ""
        val requestDate = SimpleDateFormat("yyyy-MM-dd HH:mm:ss", Locale.KOREA).format(Date())

        lifecycleScope.launch {
            try {
                // 1. ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú (ÏûàÏùÑ Í≤ΩÏö∞)
                val photoUrls = if (photoUris.isNotEmpty()) {
                    uploadPhotos(photoUris)
                } else {
                    emptyList()
                }

                // 2. FirestoreÏóê Ï†ÄÏû•
                val requestData = hashMapOf(
                    "applicantName" to applicantName,
                    "applicantDepartment" to applicantDepartment,
                    "applicantEmail" to applicantEmail,
                    "equipmentName" to equipmentName,
                    "quantity" to quantity,
                    "location" to location,
                    "purpose" to purpose,
                    "note" to note,
                    "photoUrls" to photoUrls,
                    "requestDate" to requestDate,
                    "status" to PurchaseStatus.PENDING.displayName,
                    "modifyCount" to 0
                )

                val docRef = db.collection("purchaseRequests")
                    .add(requestData)
                    .await()

                val requestId = docRef.id

                // 3. Î°úÏª¨ DB Ï†ÄÏû• (Î∞±ÏóÖ)
                dbHelper.insertPurchaseRequest(
                    applicantName, applicantDepartment, equipmentName,
                    location, purpose, note, requestDate, PurchaseStatus.PENDING.displayName
                )

                // 4. Google Sheets Ï†ÄÏû•
                val googleSheetsHelper = GoogleSheetsHelper(this@PurchaseRequestActivityV2)
                val sheetsSuccess = googleSheetsHelper.submitToGoogleSheets(
                    applicantName, applicantDepartment, equipmentName,
                    location, purpose, note, requestDate,
                    hasPhoto = photoUrls.isNotEmpty(),
                    photoUrls = photoUrls.joinToString(",")
                )

                // 5. Ïù¥Î©îÏùº Ï†ÑÏÜ°
                emailHelper.sendPurchaseRequestEmail(
                    applicantName, applicantDepartment, equipmentName,
                    quantity, location, purpose, note, requestDate, photoUrls
                )

                // 6. Í¥ÄÎ¶¨ÏûêÏóêÍ≤å FCM ÏïåÎ¶º
                fcmHelper.notifyAdminNewRequest(
                    applicantName, equipmentName, requestId
                )

                // ÏÑ±Í≥µ Ï≤òÎ¶¨
                showSuccessDialog()

            } catch (e: Exception) {
                Toast.makeText(
                    this@PurchaseRequestActivityV2,
                    "Ï†úÏ∂ú Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§: ${e.message}",
                    Toast.LENGTH_LONG
                ).show()
            } finally {
                btnNext.isEnabled = true
                progressBar.visibility = View.GONE
            }
        }
    }

    private suspend fun uploadPhotos(uris: List<Uri>): List<String> {
        val urls = mutableListOf<String>()

        for (uri in uris) {
            val filename = "purchase_photos/${System.currentTimeMillis()}_${(0..9999).random()}.jpg"
            val ref = storage.reference.child(filename)

            ref.putFile(uri).await()
            val url = ref.downloadUrl.await().toString()
            urls.add(url)
        }

        return urls
    }

    private fun showSuccessDialog() {
        AlertDialog.Builder(this)
            .setTitle("‚úÖ Íµ¨Îß§Ïã†Ï≤≠ ÏôÑÎ£å")
            .setMessage("""
                Íµ¨Îß§Ïã†Ï≤≠Ïù¥ ÏÑ±Í≥µÏ†ÅÏúºÎ°ú Ï†úÏ∂úÎêòÏóàÏäµÎãàÎã§!
                
                üìä Í¥ÄÎ¶¨ÏûêÍ∞Ä Ïã§ÏãúÍ∞ÑÏúºÎ°ú ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§
                üìß ÏÉÅÏÑ∏ ÎÇ¥Ïö©Ïù¥ Ïù¥Î©îÏùºÎ°ú Ï†ÑÏÜ°ÎêòÏóàÏäµÎãàÎã§
                
                Íµ¨Îß§Ïã†Ï≤≠ ÌòÑÌô©ÏóêÏÑú ÏßÑÌñâÏÉÅÌô©ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.
            """.trimIndent())
            .setPositiveButton("ÌôïÏù∏") { _, _ ->
                setResult(Activity.RESULT_OK)
                finish()
            }
            .setCancelable(false)
            .show()
    }

    // Ïπ¥Î©îÎùº/Í∞§Îü¨Î¶¨ Í¥ÄÎ†® Î©îÏÑúÎìúÎì§
    fun openCamera() {
        val photoFile = createImageFile()
        val photoUri = FileProvider.getUriForFile(
            this,
            "${packageName}.fileprovider",
            photoFile
        )
        photoUris.add(photoUri)

        val intent = Intent(MediaStore.ACTION_IMAGE_CAPTURE).apply {
            putExtra(MediaStore.EXTRA_OUTPUT, photoUri)
        }
        startActivityForResult(intent, REQUEST_IMAGE_CAPTURE)
    }

    fun openGallery() {
        val intent = Intent(Intent.ACTION_GET_CONTENT).apply {
            type = "image/*"
            putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)
        }
        startActivityForResult(Intent.createChooser(intent, "ÏÇ¨ÏßÑ ÏÑ†ÌÉù"), REQUEST_IMAGE_PICK)
    }

    private fun createImageFile(): File {
        val timeStamp = SimpleDateFormat("yyyyMMdd_HHmmss", Locale.KOREA).format(Date())
        val storageDir = getExternalFilesDir(android.os.Environment.DIRECTORY_PICTURES)
        return File.createTempFile("IMG_${timeStamp}_", ".jpg", storageDir)
    }

    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {
        super.onActivityResult(requestCode, resultCode, data)

        if (resultCode != Activity.RESULT_OK) return

        when (requestCode) {
            REQUEST_IMAGE_CAPTURE -> {
                // PhotoFragmentÏóê Ï†ÑÎã¨
                val fragment = supportFragmentManager.findFragmentByTag("f5") as? PhotoFragment
                fragment?.onPhotoAdded()
            }
            REQUEST_IMAGE_PICK -> {
                data?.let {
                    if (it.clipData != null) {
                        for (i in 0 until it.clipData!!.itemCount) {
                            photoUris.add(it.clipData!!.getItemAt(i).uri)
                        }
                    } else {
                        it.data?.let { uri -> photoUris.add(uri) }
                    }

                    val fragment = supportFragmentManager.findFragmentByTag("f5") as? PhotoFragment
                    fragment?.onPhotoAdded()
                }
            }
        }
    }
}

// Ï†ÑÏ≤¥ ÏΩîÎìúÎ•º Ìï©ÏπòÎ†§Î©¥:
// 1. PurchaseRequestActivityV2_Part1.ktÏùò ÎÇ¥Ïö©ÏùÑ Î≥µÏÇ¨
// 2. "// PurchaseRequestActivityV2_Part2.ktÏóêÏÑú Í≥ÑÏÜç..." Î∂ÄÎ∂ÑÏùÑ ÏÇ≠Ï†ú
// 3. PurchaseRequestActivityV2_Part2.ktÏùò ÎÇ¥Ïö©ÏùÑ Ïù¥Ïñ¥ÏÑú Î∂ôÏó¨ÎÑ£Í∏∞